## pyproject.toml -*- mode: toml -*-

[project]
name            = "doot"
version         = "1.0.4"
description     = "An opinionated, TOML based task runner"
readme          = "README.md"
requires-python = ">=3.12"
license         = {file = "LICENSE"}
keywords        = ["toml","taskrunner"]
authors         = [
  {email = "jgrey.n.plus.one@gmail.com", name  = "jgrey"}
]
classifiers     = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Development Status :: 3 - Alpha",
  "Topic :: Utilities",
]

dependencies   = [
    "networkx > 3.0",
    "sh >= 2.0.6",
    "stackprinter >= 0.2.10",
    "sty >= 1.0.0",
    "boltons >= 23.0.0",
    "pydantic >= 2.7.0",
    "jgdv >= 1.0.0",
    "packaging",
    "matplotlib",
]

[project.optional-dependencies]
test = [
  "pytest >= 8.3.0",
  "pytest-mock >= 3.14",
]
docs = [
    "Sphinx >=7.4.0",
    "sphinx-rtd-theme",
    "myst_parser >= 4.0.0",
]

##-- urls
[project.urls]
homepage      = "https://github.com/jgrey4296/doot"
documentation = "https://doot.readthedocs.io/en/latest/"
repository    = "https://github.com/jgrey4296/doot"
changelog     = "https://github.com//doot/blob/master/CHANGELOG.md"

##-- end urls

##-- scripts
[project.scripts]
doot = "doot.__main__:main"

##-- end scripts

##-- build system
[build-system]
requires = [
         "setuptools >= 63.1.0",
         "wheel >= 0.37.1"
]

build-backend = "setuptools.build_meta"

[tool.setuptools]

[tool.setuptools.packages.find]
namespaces = true
where      = ["."]
include    = ["doot*"]

[tool.setuptools.package-data]
"*" = ["*"]

[tool.setuptools.exclude-package-data]

##-- end build system

# Tools #######################################################################

##-- pytest
# https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
addopts           = ["--ignore-glob=related_/*"]
cache_dir         = ".temp/pytest_cache"
log_file          = ".temp/logs/pytest.log"

log_cli           = false
log_level         = "DEBUG"
log_cli_level     = "INFO"
# log_format      = "%(levelname)s %(name)s : %(message)s"
log_format        = "%(levelname)s %(module)s %(lineno)s : %(message)s"
log_file_level    = "DEBUG"
log_file_format   = "%(asctime)s %(levelname)s %(name)s : %(message)s"

##-- end pytest

##-- bumpver
# https://github.com/mbarkhau/bumpver
[tool.bumpver]
current_version    = "1.0.4"
version_pattern    = "MAJOR.MINOR.PATCH"
commit_message     = "[bump]: version {old_version} -> {new_version}"
tag_message        = "{new_version}"
tag_scope          = "default"
commit             = true
tag                = false
# push             = true
# pre_commit_hook  = ""
# post_commit_hook = ""

[tool.bumpver.file_patterns]
"pyproject.toml"   = [
                   '^version\s+=\s+"{version}"',
                   '^current_version\s+=\s+"{version}"'
]
"doot/_interface.py"         = ['^__version__\s+:\s+Final\[str\]\s+=\s+"{version}"']
"README.md"                  = ["^Version : {version}  "]
"docs/conf.py"               = ['^release\s+=\s+"{version}"']

##-- end bumpver

##-- isort
# https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
color_output           = false
py_version             = 311
# profile                = "hug"
comment_prefix         = "# "
sections               = [
"FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
default_section        = "THIRDPARTY"
lines_after_imports    = -1
lines_between_sections = 1
lines_between_types    = 0



import_heading_future      = "Imports:"
import_heading_stdlib      = "##-- stdlib imports"
import_heading_thirdparty  = "##-- 3rd party imports"
import_heading_firstparty  = "##-- 1st party imports"
import_heading_localfolder = ""

import_footer_future      = ""
import_footer_stdlib      = "##-- end stdlib imports"
import_footer_thirdparty  = "##-- end 3rd party imports"
import_footer_firstparty  = "##-- end 1st party imports"
import_footer_localfolder = "# End of Imports."

add_imports            = []

##-- end isort

##-- coverage
[tool.coverage.run]
branch           = true # measure branch coverage
# command_line   = "..."
cover_pylib      = false # measure stdlib
data_file        = ".temp/coverage/coverage_cache" # cache
disable_warnings = []
source           = ["doot"] # packages or dirs to measure
include          = [] # files to measure. ignored if source is set.
omit             = ["__tests/*"] # files to not measure
relative_files   = false #
timid            = false # simpler but slower tracing

# [tool.coverage.paths] # specify equivalent paths
# source = []

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
# fail_under = 20 # coverage percentage
format = "text" # or "markdown", "total"
show_missing = false # for in the report
skip_empty = false # skip files like __init__.py

[tool.coverage.html]
directory = ".temp/coverage/html_report" # where to write output

[tool.coverage.xml]
output = ".temp/coverage/coverage.xml" # where to write output

[tool.coverage.json]
output = ".temp/coverage/coverage.json" # where to write output
pretty_print = true
##-- end coverage

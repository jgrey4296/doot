#+TITLE: Doot Todos
#+STARTUP: agenda

* Active
* Actions :actions:
** [∅] actions don't bother to run if the keys they return are already present
** [∅] add postbox decorators like keys
** [∅] job actions
#+NAME: example
#+begin_src toml :results output
[[tasks.example]]
name = "builder"
ctor = "job"
actions = [
        {do="job.walk", roots_="roots", exts_="exts", update_="files"},
        {do="job.namer",          from_="files", update_="names"},
        {do="job.expand",         from_="files", base="example::base", update_="subtasks"},
        {do="job.limit",          from_="files", count=20, update_="files"},
        {do="inject:shadow_path", from_="subtasks", fpath="fpath" }
        {do="job.queue",          from_="subtasks"},
]
#+end_src


*** DONE expander
- State "DONE"       from              [2024-06-11 Tue 00:51]
*** matcher
*** DONE walker
*** DONE limiter
*** DONE setup
*** DONE shadower
*** DONE subtasker
*** chaining
** [∅] shell action fail handler
** [∅] shell output redirection
** [∅] task on-fail actions
** DONE test postbox
- State "DONE"       from "QUEUED"     [2024-06-15 Sat 00:48]
*** OKAY write something on postboxes
   [[/media/john/data/github/python/doot/wiki_/lets_talk_about_state.md::46][Location]]
   :context:
        <2024-06-14 Fri> ## Passing State between tasks: PostBoxes
   :END:
* Commands :commands:
** [∅] help command print toml cli's separate
** [∅] locs_cmd print matches
** [∅] locs_cmd print by source
** [∅] stub templates registration / env var location
** [∅] locs command includes metadata
** [∅] list command json output
for nushell
** DEAD help command add mixin's as targets
* Mixins :mixins:
** [∅] runner fail handler
** DEAD job : generate tasks from postbox entries
unnecessary as you can post.get then job.expand
** DEAD task setup/cleanup dependency mixin
* QUEUED readthedocs
* Refactors
** [∅] refactor doot log setup to jgdv
* Other
** [∅] make dootkey resolution order explicit
mamba goes: RCfile -> env -> cli -> api
https://mamba.readthedocs.io/en/latest/user_guide/configuration.html

dootkey's logic resides in the formatter's get_value method

** [∅] active_when conditions
** [∅] backup list cache
***** make jobs resumable
** [∅] cli target listing
** [∅] read/write as implicit dependencies
** [∅] task name params
so "a.group::task.{arg=val}"?
** [∅] same task different args
** [∅] staleness / date checking
** [∅] tracker.contains : artifact checks
** [∅] tracker handling of adding unambiguous group-less task names
** [∅] tracker writing/reading
** [∅] use cli param constraints in cli parsing
** [∅] policies
*** breaker
*** bulkhead
*** retry
*** timeout
*** cache
*** fallback
*** cleanup
*** debug
*** pretend
*** accept
** [∅] queue cleanup task
** [∅] symlink nonlocal task files into .tasks
** [∅] queue tasks without groups when no ambiguity
** [∅] using action annotations to modify tracker network dependencies
** [∅] cli print control help
** [∅] pre-run, print task plan from built network
** [∅] cli args
currently doot/control/base_tracker.py : 243
uses match spec.source
** [∅] move task spec instantiation logic to TaskSpecFactory
** [∅] job expansion naming scheme
** [⟙] ensure idempotency of tracker add_task/queue_task
- State "[⟙]"        from "[∅]"        [2024-06-13 Thu 23:34]
** NO boltons.priorityQueue subclass
override 'add' to call get_priority on the *task* before calling super().add
* TODO Task Runners Feature Comparison
[[file:/media/john/data/github/python/doot/wiki_/task_runner_comparison.md::Comparing Task Runners][wiki_file]]
push / pull
declarative, imperative

* [[file:/media/john/data/github/python/dootle/.tasks/dootle_todos.org::*Dootle][Dootle]]
* [[file:/media/john/data/github/python/corana/.tasks/corana_todos.org::*Corana][Corana]]
* Links
